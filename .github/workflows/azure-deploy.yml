name: Deploy to Azure

# Workflow for deploying Python app to Azure Web App
# Handles deployment package creation, Azure resource setup, and deployment verification
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10.16'
  STARTUP_COMMAND: 'sh startup.sh'
  AZURE_LOCATION: 'eastus2'
  RESOURCE_GROUP: 'BHFEApps'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set file permissions
      run: |
        chmod +x startup.sh
        find . -type f -name "*.py" -exec chmod 644 {} \;
        find . -type f -name "*.sh" -exec chmod 755 {} \;
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Create Resource Group if not exists
      uses: azure/CLI@v1
      with:
        inlineScript: |
          if [ -z "${{ env.RESOURCE_GROUP }}" ]; then
            echo "Error: RESOURCE_GROUP is not set"
            exit 1
          fi
          
          if ! az group show --name "${{ env.RESOURCE_GROUP }}" &> /dev/null; then
            echo "Creating Resource Group..."
            az group create \
              --name "${{ env.RESOURCE_GROUP }}" \
              --location "${{ env.AZURE_LOCATION }}"
          fi

    - name: Create App Service Plan if not exists
      uses: azure/CLI@v1
      with:
        inlineScript: |
          APP_SERVICE_PLAN="${{ secrets.AZURE_APP_SERVICE_PLAN }}"
          if [ -z "$APP_SERVICE_PLAN" ]; then
            echo "Error: AZURE_APP_SERVICE_PLAN secret is not set"
            exit 1
          fi
          
          regions=("eastus2" "eastus" "centralus" "westus2")
          created=false
          
          for region in "${regions[@]}"; do
            echo "Attempting to create App Service Plan in $region..."
            if az appservice plan create \
              --name "$APP_SERVICE_PLAN" \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --sku B1 \
              --is-linux \
              --location "$region" &> /dev/null; then
              echo "Successfully created App Service Plan in $region"
              created=true
              break
            fi
          done
          
          if [ "$created" = false ]; then
            echo "Error: Failed to create App Service Plan in any region"
            exit 1
          fi

    - name: Create and Configure Azure Web App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          WEBAPP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          if [ -z "$WEBAPP_NAME" ]; then
            echo "Error: AZURE_WEBAPP_NAME secret is not set"
            exit 1
          fi
          
          # Create web app if it doesn't exist
          if ! az webapp show --name "$WEBAPP_NAME" --resource-group "${{ env.RESOURCE_GROUP }}" &> /dev/null; then
            echo "Creating Web App..."
            az webapp create \
              --name "$WEBAPP_NAME" \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --plan "${{ secrets.AZURE_APP_SERVICE_PLAN }}" \
              --runtime "PYTHON|3.10"
          fi

          # Configure app settings
          echo "Configuring Web App settings..."
          az webapp config appsettings set \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              PYTHON_ENABLE_GUNICORN=false \
              PORT=8000 \
              WEBSITES_PORT=8000 \
              PYTHON_VERSION=${{ env.PYTHON_VERSION }} \
              STREAMLIT_SERVER_PORT=8000 \
              STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
              STREAMLIT_SERVER_HEADLESS=true \
              POST_BUILD_COMMAND="bash startup.sh"

          # Configure startup command and Python version
          echo "Setting startup command and Python version..."
          az webapp config set \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --startup-file "${{ env.STARTUP_COMMAND }}" \
            --python-version "3.10" \
            --linux-fx-version "PYTHON|3.10"

    - name: Prepare deployment package
      run: |
        echo "Creating deployment package..."
        # Remove any existing deploy.zip
        rm -f deploy.zip
        
        # Create a clean deployment directory
        mkdir -p deploy_temp
        
        # Copy necessary files
        echo "Copying files to deployment directory..."
        cp -r \
          .deployment \
          .streamlit \
          apps \
          attached_assets \
          *.py \
          requirements.txt \
          startup.sh \
          web.config \
          deploy_temp/
        
        # Set correct permissions in the deployment directory
        echo "Setting file permissions..."
        chmod +x deploy_temp/startup.sh
        find deploy_temp -type f -name "*.py" -exec chmod 644 {} \;
        
        # Create deployment package
        echo "Creating ZIP archive..."
        cd deploy_temp
        zip -r ../deploy.zip .
        cd ..
        
        # Verify package contents and size
        echo "Verifying deployment package:"
        ls -lh deploy.zip
        echo "Package contents:"
        unzip -l deploy.zip
        
        # Clean up
        rm -rf deploy_temp

    - name: Stop existing web app
      uses: azure/CLI@v1
      with:
        inlineScript: |
          WEBAPP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          echo "Stopping web app before deployment..."
          az webapp stop \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}"

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      timeout-minutes: 10
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        package: deploy.zip
        slot-name: production

    - name: Start web app and verify deployment
      uses: azure/CLI@v1
      with:
        inlineScript: |
          WEBAPP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          
          echo "Starting web app..."
          az webapp start \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}"
          
          echo "Waiting for app to start..."
          sleep 30
          
          echo "Checking deployment status..."
          DEPLOY_STATUS=$(az webapp deployment list \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query "[0].status" -o tsv)
          
          echo "Deployment status: $DEPLOY_STATUS"
          
          if [ "$DEPLOY_STATUS" != "Success" ]; then
            echo "Deployment may have failed. Checking logs..."
            az webapp log tail \
              --name "$WEBAPP_NAME" \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --provider http
            exit 1
          fi
          
          echo "Checking application health..."
          APP_URL=$(az webapp show \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query "defaultHostName" -o tsv)
          
          echo "Application URL: https://$APP_URL"
          
          # Wait for the app to be responsive
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -s -f "https://$APP_URL" > /dev/null; then
              echo "Application is responding successfully!"
              exit 0
            fi
            
            echo "Waiting for application to respond... (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          echo "Warning: Application is not responding after deployment"
          exit 1 