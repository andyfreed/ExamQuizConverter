name: Deploy to Azure

# Note: Requires Azure Service Principal with Contributor role on the resource group
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10.16'
  STARTUP_COMMAND: 'sh startup.sh'
  AZURE_LOCATION: 'eastus'
  RESOURCE_GROUP: 'BHFEApps'  # Add resource group name directly in env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set file permissions
      run: |
        chmod +x startup.sh
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Create Resource Group if not exists
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if resource group exists
          if [ -z "${{ env.RESOURCE_GROUP }}" ]; then
            echo "Error: RESOURCE_GROUP is not set"
            exit 1
          fi
          
          if ! az group show --name "${{ env.RESOURCE_GROUP }}" &> /dev/null; then
            echo "Creating Resource Group..."
            az group create \
              --name "${{ env.RESOURCE_GROUP }}" \
              --location "${{ env.AZURE_LOCATION }}"
          fi

    - name: Create App Service Plan if not exists
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if app service plan exists
          if [ -z "${{ env.RESOURCE_GROUP }}" ]; then
            echo "Error: RESOURCE_GROUP is not set"
            exit 1
          fi
          
          APP_SERVICE_PLAN="${{ secrets.AZURE_APP_SERVICE_PLAN }}"
          if [ -z "$APP_SERVICE_PLAN" ]; then
            echo "Error: AZURE_APP_SERVICE_PLAN secret is not set"
            exit 1
          fi
          
          if ! az appservice plan show --name "$APP_SERVICE_PLAN" --resource-group "${{ env.RESOURCE_GROUP }}" &> /dev/null; then
            echo "Creating App Service Plan..."
            az appservice plan create \
              --name "$APP_SERVICE_PLAN" \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --sku B1 \
              --is-linux
          fi

    - name: Create Azure Web App if not exists
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if web app exists
          WEBAPP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          if [ -z "$WEBAPP_NAME" ]; then
            echo "Error: AZURE_WEBAPP_NAME secret is not set"
            exit 1
          fi
          
          APP_SERVICE_PLAN="${{ secrets.AZURE_APP_SERVICE_PLAN }}"
          if ! az webapp show --name "$WEBAPP_NAME" --resource-group "${{ env.RESOURCE_GROUP }}" &> /dev/null; then
            echo "Creating Web App..."
            az webapp create \
              --name "$WEBAPP_NAME" \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --plan "$APP_SERVICE_PLAN" \
              --runtime "PYTHON|3.10"
          fi

    - name: Configure Azure Web App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Configure app settings
          WEBAPP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          az webapp config appsettings set \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              PYTHON_ENABLE_GUNICORN=false \
              PORT=8000 \
              WEBSITES_PORT=8000 \
              PYTHON_VERSION=${{ env.PYTHON_VERSION }} \
              STREAMLIT_SERVER_PORT=8000 \
              STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
              STREAMLIT_SERVER_HEADLESS=true

          # Configure startup command and Python version
          az webapp config set \
            --name "$WEBAPP_NAME" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --startup-file "${{ env.STARTUP_COMMAND }}" \
            --python-version "3.10" \
            --linux-fx-version "PYTHON|3.10"

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        package: . 